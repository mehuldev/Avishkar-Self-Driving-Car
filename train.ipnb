{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Untitled2 (1).ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mehuldev/Avishkar-Self-Driving-Car/blob/main/train.ipnb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xu0XaIu2DyTY"
      },
      "source": [
        "Mounting the google drive"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j_40Q-PaClbw",
        "outputId": "37b745a2-4285-401d-89d1-70fd9619dfaa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')                                  "
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1mhGIYRC2Hv"
      },
      "source": [
        "Importing Required Modules"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f_3YJ0joFzju"
      },
      "source": [
        "import tensorflow as tf    \n",
        "import pandas as pd\n",
        "from __future__ import division, print_function, absolute_import\n",
        "from tqdm import tqdm\n",
        "from keras.preprocessing import image\n",
        "import numpy as np\n",
        "import scipy.io as io\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from keras.layers.pooling import MaxPooling2D, AveragePooling2D\n",
        "from keras.layers import Cropping2D\n",
        "from keras.layers.core import Dropout\n",
        "from keras.layers.normalization import BatchNormalization\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import os\n",
        "from PIL import Image\n"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c5mr_MKxC24H"
      },
      "source": [
        "Importing the train data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LpnUJB8KC7Us",
        "outputId": "243a85d6-2f3b-44b5-dcee-0ef6cce05e18",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "data = io.loadmat('/content/drive/My Drive/Colab Notebooks/data')\n",
        "X = []\n",
        "Y = []\n",
        "del data['__header__']\n",
        "del data['__version__']\n",
        "del data['__globals__']\n",
        "\n",
        "for k in tqdm(data.keys()):\n",
        "    img = np.asarray(data[k])\n",
        "    X.append(img)\n",
        "    j = k.find('angle')+6\n",
        "    angle = float(k[j:j+4])\n",
        "    j = k.find('throttle')+9\n",
        "    throttle = float(k[j:j+4])\n",
        "    Y.append([angle,throttle])\n",
        "X = np.array(X)\n",
        "Y = np.array(Y)\n",
        "print(X.shape)\n",
        "assert Y.shape[1] == 2\n",
        "print(Y.shape)"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 2807/2807 [00:00<00:00, 350086.57it/s]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "(2807, 240, 320, 3)\n",
            "(2807, 2)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rV2vEqo4hhrX"
      },
      "source": [
        "Split data into train data and test data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PIvRmoUvGAYs",
        "outputId": "a1449c76-3bd2-4018-8658-81fede60b3e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=1337, test_size=100, shuffle = True)\n",
        "print(X_train.shape,X_test.shape)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2707, 240, 320, 3) (100, 240, 320, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a79Yz9jQd-Ch"
      },
      "source": [
        "Defining the Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k1CGwjO7Bmia"
      },
      "source": [
        "Convolution Layers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I5jK3Kq4g3Ed",
        "outputId": "5f7a10b2-dc4e-4744-bddb-58bebef1bc5e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        }
      },
      "source": [
        "model = keras.Sequential()\n",
        "model.add(keras.Input(shape = (240,320,3)))\n",
        "model.add(layers.experimental.preprocessing.Rescaling(1./255))\n",
        "model.add(layers.Conv2D(24, 5, strides=2, activation=\"elu\", use_bias=False))\n",
        "model.add(layers.Conv2D(36,5, strides=2,activation=\"elu\", use_bias=False))\n",
        "model.add(layers.Conv2D(48,5, strides=2,activation=\"elu\",use_bias=False))\n",
        "model.add(layers.Conv2D(64,5, strides=2,activation=\"elu\",use_bias= False))\n",
        "model.add(layers.Conv2D(64,5, strides=2,activation=\"elu\", use_bias=False))\n",
        "model.add(MaxPooling2D(4, strides=4))\n",
        "model.add(layers.Dropout(.4))\n",
        "model.summary()"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_11\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "rescaling_9 (Rescaling)      (None, 240, 320, 3)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_55 (Conv2D)           (None, 118, 158, 24)      1800      \n",
            "_________________________________________________________________\n",
            "conv2d_56 (Conv2D)           (None, 57, 77, 36)        21600     \n",
            "_________________________________________________________________\n",
            "conv2d_57 (Conv2D)           (None, 27, 37, 48)        43200     \n",
            "_________________________________________________________________\n",
            "conv2d_58 (Conv2D)           (None, 12, 17, 64)        76800     \n",
            "_________________________________________________________________\n",
            "conv2d_59 (Conv2D)           (None, 4, 7, 64)          102400    \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 1, 1, 64)          0         \n",
            "_________________________________________________________________\n",
            "dropout_7 (Dropout)          (None, 1, 1, 64)          0         \n",
            "=================================================================\n",
            "Total params: 245,800\n",
            "Trainable params: 245,800\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_QDvFK1aBqrT"
      },
      "source": [
        "Linear Layers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GT_dnF_5d8-u",
        "outputId": "fdd176fc-2870-4332-ec23-a927b7754786",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 595
        }
      },
      "source": [
        "model.add(Flatten())\n",
        "model.add(layers.Dense(100,activation='elu',use_bias=False, input_shape = (64*1*18,)))\n",
        "model.add(layers.Dense(50,activation='elu',use_bias=False, input_shape = (100,)))\n",
        "model.add(layers.Dense(10,use_bias=False, input_shape = (50,)))\n",
        "model.add(layers.Dense(2,use_bias=False, input_shape = (10,)))\n",
        "model.summary()"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_11\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "rescaling_9 (Rescaling)      (None, 240, 320, 3)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_55 (Conv2D)           (None, 118, 158, 24)      1800      \n",
            "_________________________________________________________________\n",
            "conv2d_56 (Conv2D)           (None, 57, 77, 36)        21600     \n",
            "_________________________________________________________________\n",
            "conv2d_57 (Conv2D)           (None, 27, 37, 48)        43200     \n",
            "_________________________________________________________________\n",
            "conv2d_58 (Conv2D)           (None, 12, 17, 64)        76800     \n",
            "_________________________________________________________________\n",
            "conv2d_59 (Conv2D)           (None, 4, 7, 64)          102400    \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 1, 1, 64)          0         \n",
            "_________________________________________________________________\n",
            "dropout_7 (Dropout)          (None, 1, 1, 64)          0         \n",
            "_________________________________________________________________\n",
            "flatten_6 (Flatten)          (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense_24 (Dense)             (None, 100)               6400      \n",
            "_________________________________________________________________\n",
            "dense_25 (Dense)             (None, 50)                5000      \n",
            "_________________________________________________________________\n",
            "dense_26 (Dense)             (None, 10)                500       \n",
            "_________________________________________________________________\n",
            "dense_27 (Dense)             (None, 2)                 20        \n",
            "=================================================================\n",
            "Total params: 257,720\n",
            "Trainable params: 257,720\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HXcSMcS2eNfo"
      },
      "source": [
        "tf.debugging.set_log_device_placement(True)\n",
        "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), \n",
        "              loss=tf.keras.losses.MeanSquaredError(), metrics=[tf.keras.metrics.Accuracy()])  \n",
        "num_epochs = 50"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xuz0wT2uA41D",
        "outputId": "b2ec3eb3-4c43-4255-b4a5-1dbf2603b009",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "hist=model.fit(X_train, Y_train, epochs=num_epochs, validation_data=(X_test, Y_test),batch_size=32, shuffle=True)"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "85/85 [==============================] - 3s 30ms/step - loss: 0.2629 - accuracy: 0.0000e+00 - val_loss: 0.2015 - val_accuracy: 0.0000e+00\n",
            "Epoch 2/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.2058 - accuracy: 0.0000e+00 - val_loss: 0.1688 - val_accuracy: 0.0000e+00\n",
            "Epoch 3/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.1699 - accuracy: 0.0000e+00 - val_loss: 0.1413 - val_accuracy: 0.0000e+00\n",
            "Epoch 4/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.1428 - accuracy: 0.0000e+00 - val_loss: 0.1159 - val_accuracy: 0.0000e+00\n",
            "Epoch 5/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.1231 - accuracy: 0.0000e+00 - val_loss: 0.1079 - val_accuracy: 0.0000e+00\n",
            "Epoch 6/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.1116 - accuracy: 0.0000e+00 - val_loss: 0.0981 - val_accuracy: 0.0000e+00\n",
            "Epoch 7/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.1003 - accuracy: 0.0000e+00 - val_loss: 0.0962 - val_accuracy: 0.0000e+00\n",
            "Epoch 8/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0910 - accuracy: 0.0000e+00 - val_loss: 0.0880 - val_accuracy: 0.0000e+00\n",
            "Epoch 9/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0835 - accuracy: 0.0000e+00 - val_loss: 0.0811 - val_accuracy: 0.0000e+00\n",
            "Epoch 10/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0794 - accuracy: 0.0000e+00 - val_loss: 0.0740 - val_accuracy: 0.0000e+00\n",
            "Epoch 11/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0736 - accuracy: 0.0000e+00 - val_loss: 0.0740 - val_accuracy: 0.0000e+00\n",
            "Epoch 12/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0667 - accuracy: 0.0000e+00 - val_loss: 0.0709 - val_accuracy: 0.0000e+00\n",
            "Epoch 13/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0628 - accuracy: 0.0000e+00 - val_loss: 0.0699 - val_accuracy: 0.0000e+00\n",
            "Epoch 14/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0604 - accuracy: 0.0000e+00 - val_loss: 0.0716 - val_accuracy: 0.0000e+00\n",
            "Epoch 15/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0577 - accuracy: 0.0000e+00 - val_loss: 0.0711 - val_accuracy: 0.0000e+00\n",
            "Epoch 16/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0528 - accuracy: 0.0000e+00 - val_loss: 0.0690 - val_accuracy: 0.0000e+00\n",
            "Epoch 17/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0485 - accuracy: 0.0000e+00 - val_loss: 0.0619 - val_accuracy: 0.0000e+00\n",
            "Epoch 18/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0499 - accuracy: 0.0000e+00 - val_loss: 0.0584 - val_accuracy: 0.0000e+00\n",
            "Epoch 19/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0449 - accuracy: 0.0000e+00 - val_loss: 0.0570 - val_accuracy: 0.0000e+00\n",
            "Epoch 20/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0456 - accuracy: 0.0000e+00 - val_loss: 0.0567 - val_accuracy: 0.0000e+00\n",
            "Epoch 21/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0438 - accuracy: 0.0000e+00 - val_loss: 0.0564 - val_accuracy: 0.0000e+00\n",
            "Epoch 22/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0399 - accuracy: 0.0000e+00 - val_loss: 0.0568 - val_accuracy: 0.0000e+00\n",
            "Epoch 23/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0388 - accuracy: 0.0000e+00 - val_loss: 0.0576 - val_accuracy: 0.0000e+00\n",
            "Epoch 24/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0384 - accuracy: 0.0000e+00 - val_loss: 0.0557 - val_accuracy: 0.0000e+00\n",
            "Epoch 25/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0378 - accuracy: 0.0000e+00 - val_loss: 0.0578 - val_accuracy: 0.0000e+00\n",
            "Epoch 26/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0364 - accuracy: 0.0000e+00 - val_loss: 0.0538 - val_accuracy: 0.0000e+00\n",
            "Epoch 27/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0359 - accuracy: 0.0000e+00 - val_loss: 0.0533 - val_accuracy: 0.0000e+00\n",
            "Epoch 28/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0356 - accuracy: 0.0000e+00 - val_loss: 0.0529 - val_accuracy: 0.0000e+00\n",
            "Epoch 29/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0328 - accuracy: 0.0000e+00 - val_loss: 0.0589 - val_accuracy: 0.0000e+00\n",
            "Epoch 30/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0321 - accuracy: 0.0000e+00 - val_loss: 0.0518 - val_accuracy: 0.0000e+00\n",
            "Epoch 31/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0305 - accuracy: 0.0000e+00 - val_loss: 0.0523 - val_accuracy: 0.0000e+00\n",
            "Epoch 32/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0297 - accuracy: 0.0000e+00 - val_loss: 0.0549 - val_accuracy: 0.0000e+00\n",
            "Epoch 33/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0288 - accuracy: 0.0000e+00 - val_loss: 0.0480 - val_accuracy: 0.0000e+00\n",
            "Epoch 34/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0283 - accuracy: 0.0000e+00 - val_loss: 0.0526 - val_accuracy: 0.0000e+00\n",
            "Epoch 35/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0280 - accuracy: 0.0000e+00 - val_loss: 0.0541 - val_accuracy: 0.0000e+00\n",
            "Epoch 36/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0281 - accuracy: 0.0000e+00 - val_loss: 0.0529 - val_accuracy: 0.0000e+00\n",
            "Epoch 37/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0266 - accuracy: 0.0000e+00 - val_loss: 0.0548 - val_accuracy: 0.0000e+00\n",
            "Epoch 38/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0268 - accuracy: 0.0000e+00 - val_loss: 0.0539 - val_accuracy: 0.0000e+00\n",
            "Epoch 39/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0262 - accuracy: 0.0000e+00 - val_loss: 0.0515 - val_accuracy: 0.0000e+00\n",
            "Epoch 40/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0254 - accuracy: 0.0000e+00 - val_loss: 0.0545 - val_accuracy: 0.0000e+00\n",
            "Epoch 41/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0246 - accuracy: 0.0000e+00 - val_loss: 0.0574 - val_accuracy: 0.0000e+00\n",
            "Epoch 42/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0255 - accuracy: 0.0000e+00 - val_loss: 0.0507 - val_accuracy: 0.0000e+00\n",
            "Epoch 43/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0235 - accuracy: 0.0000e+00 - val_loss: 0.0508 - val_accuracy: 0.0000e+00\n",
            "Epoch 44/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0229 - accuracy: 0.0000e+00 - val_loss: 0.0524 - val_accuracy: 0.0000e+00\n",
            "Epoch 45/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0233 - accuracy: 0.0000e+00 - val_loss: 0.0490 - val_accuracy: 0.0000e+00\n",
            "Epoch 46/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0230 - accuracy: 0.0000e+00 - val_loss: 0.0514 - val_accuracy: 0.0000e+00\n",
            "Epoch 47/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0230 - accuracy: 0.0000e+00 - val_loss: 0.0537 - val_accuracy: 0.0000e+00\n",
            "Epoch 48/50\n",
            "85/85 [==============================] - 2s 28ms/step - loss: 0.0224 - accuracy: 0.0000e+00 - val_loss: 0.0508 - val_accuracy: 0.0000e+00\n",
            "Epoch 49/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0209 - accuracy: 0.0000e+00 - val_loss: 0.0517 - val_accuracy: 0.0000e+00\n",
            "Epoch 50/50\n",
            "85/85 [==============================] - 2s 27ms/step - loss: 0.0215 - accuracy: 0.0000e+00 - val_loss: 0.0514 - val_accuracy: 0.0000e+00\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dvxgisQJfZ42",
        "outputId": "a5d019db-954f-4bbc-ebd6-f6508cb30d5d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        }
      },
      "source": [
        "print(hist.history)\n",
        "\n",
        "plt.plot(hist.history['loss'])\n",
        "plt.plot(hist.history['val_loss'])\n",
        "plt.title('Model loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['Train', 'Val'], loc='upper right')\n",
        "plt.show()\n",
        "plt.pause(5.)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'loss': [0.26289284229278564, 0.20583052933216095, 0.16993831098079681, 0.1427505612373352, 0.1230955645442009, 0.11159228533506393, 0.10031221807003021, 0.09100194275379181, 0.08353665471076965, 0.07940086722373962, 0.07362554222345352, 0.06665235757827759, 0.0627659484744072, 0.06037740409374237, 0.057698141783475876, 0.0527561716735363, 0.048519477248191833, 0.049908969551324844, 0.04493633657693863, 0.04557623714208603, 0.04379918798804283, 0.03990194946527481, 0.038826797157526016, 0.0383857823908329, 0.03781187906861305, 0.036439381539821625, 0.03590894117951393, 0.035552021116018295, 0.03284377232193947, 0.03205110505223274, 0.030464448034763336, 0.029689276590943336, 0.028750646859407425, 0.028305772691965103, 0.027964036911725998, 0.028084471821784973, 0.026565594598650932, 0.02679612673819065, 0.026203975081443787, 0.025436213240027428, 0.024639295414090157, 0.025498056784272194, 0.02349049039185047, 0.022948389872908592, 0.023323001340031624, 0.023005113005638123, 0.023009780794382095, 0.022447455674409866, 0.0208725705742836, 0.021450461819767952], 'accuracy': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'val_loss': [0.20153270661830902, 0.16881494224071503, 0.14133933186531067, 0.11587663739919662, 0.10785558819770813, 0.0981455072760582, 0.09618759155273438, 0.08802375942468643, 0.08105769753456116, 0.07398543506860733, 0.0740441158413887, 0.0709025114774704, 0.06990296393632889, 0.07159950584173203, 0.07111496478319168, 0.06904042512178421, 0.061913322657346725, 0.05835916846990585, 0.05697745457291603, 0.0566856674849987, 0.05635274574160576, 0.05680384114384651, 0.05764758959412575, 0.055695708841085434, 0.057805780321359634, 0.053808312863111496, 0.053299274295568466, 0.05293015018105507, 0.05887984856963158, 0.05181821808218956, 0.05226382240653038, 0.05487225949764252, 0.04804747551679611, 0.052572473883628845, 0.054085418581962585, 0.05288757383823395, 0.05480743944644928, 0.053905587643384933, 0.05146576464176178, 0.05448545143008232, 0.057397861033678055, 0.05070675536990166, 0.05084472522139549, 0.05244624987244606, 0.04900689050555229, 0.05135035887360573, 0.05367494747042656, 0.05077317729592323, 0.05167418345808983, 0.05138850584626198], 'val_accuracy': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HZXOyGRs7USe",
        "outputId": "efc77489-bcfb-4f67-c49f-93cbf8361b48",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "y = model.predict(X_test)\n",
        "plt.plot(y[:,1],'ro')\n",
        "plt.plot(Y_test[:,1],'bo')"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fa4c3261668>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cZkMOT29zng-",
        "outputId": "87057754-1b18-45ca-abff-236f0e51d10b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "os.chdir('/content/drive/My Drive/Colab Notebooks')\n",
        "i = 2\n",
        "img = []\n",
        "while i <= 22:\n",
        "  img.append(np.asarray(Image.open('image'+str(i)+'.jpg')))\n",
        "  \n",
        "  i += 2\n",
        "\n",
        "img = np.array(img)\n",
        "model.predict(img)"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.19842544e-01,  2.24056020e-01],\n",
              "       [ 3.44115913e-01,  3.44994724e-01],\n",
              "       [ 2.40915835e-01,  3.27651232e-01],\n",
              "       [ 2.92024314e-01,  3.14950168e-01],\n",
              "       [ 2.90021509e-01,  3.43325853e-01],\n",
              "       [ 5.27060404e-02,  3.46850336e-01],\n",
              "       [-4.26858664e-04,  2.67756164e-01],\n",
              "       [ 3.16483974e-01,  3.35296094e-01],\n",
              "       [ 5.58743514e-02,  3.67838919e-01],\n",
              "       [ 3.18777472e-01,  4.43879426e-01],\n",
              "       [ 2.08305404e-01,  1.80959981e-02]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3kOb2CjwL3Q"
      },
      "source": [
        "model.save(\"model1.h5\")   "
      ],
      "execution_count": 89,
      "outputs": []
    }
  ]
}